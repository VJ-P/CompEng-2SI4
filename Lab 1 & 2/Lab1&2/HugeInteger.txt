package Main;

public class HugeInteger {
    private int[] largeNum;                                                     //an array to hold the values of the huge integer
    private boolean sign;                                                       //indicates whether the sign is positive(0) of negative(1)
    private int size;                                                           //holds the number of digits in the integer
    
    public HugeInteger(String val){
        if (val.charAt(0)=='-'){                                                //first determine if the input is negative
            if (val.length() == 1 ){
                throw new IllegalArgumentException("Invalid Input");
            }
            if (val.charAt(1) == '0' && val.length() > 2){
                while(val.charAt(1) == '0' && val.length() > 2){
                    val = val.substring(1, val.length());
                }
            }
            if ((val.charAt(0)== '0' && val.charAt(1)== '0') && val.length() == 2){
                sign = false;
            }
            else{
                sign = true;                                                        //initializes the sign
            }
            size = val.length() - 1;                                            //initializes the size
            largeNum = new int[size];                                           //initializes the array
            for (int i = 1; i < size + 1; i++){                                 //starts at the char after the sign and until the end of the string
                if (Character.isDigit(val.charAt(i)) == false){                 //checks if a non-number was inputed and throws an exception
                    throw new IllegalArgumentException("Invalid Input");
                }
            }
            for (int i = 0; i < size; i++){                                     //loop to copy elements from the string and input them into the array
                largeNum[i] = Character.getNumericValue(val.charAt(i+1));       //subtract by 48 to adjust for typecast
            }
        }
        else{
            if (val.length() == 0){
                throw new IllegalArgumentException("Invalid Input");
            }
            if (val.charAt(0) == '0' && val.length() > 1){
                while(val.charAt(0) == '0' && val.length() > 1){
                    val = val.substring(1, val.length());
                }
            }
            sign = false;                                                       //initializes the sign
            size = val.length();                                                //initializes the size
            largeNum = new int[size];                                           //initializes the array
            for (int i = 0; i < size; i++){                                     //iterates through the string
                if (Character.isDigit(val.charAt(i)) == false){                 //checks if a non-number was inputed and throws an exception
                    throw new IllegalArgumentException("Invalid Input");
                }
            }
            for (int i = 0; i < size; i++){                                     //loop to copy elements from the string and input them into the array
                largeNum[i] = Character.getNumericValue(val.charAt(i));         //adjust for typecast
            }
        }
    }
    
    public HugeInteger(int n){
        if (n < 1){                                                             //checks to make sure that n is greater than or equal to 1
            throw new IllegalArgumentException("Invalid Input");
        }
        else{
            size = n;                                                           //initialize the size
            largeNum = new int[n];                                              //initialize the array
            sign = (Math.random() >= 0.5)? true: false;
            largeNum[0] = (int)(Math.random()*8+1);                             //randomly generates a number from 1 to 9 inclusive (can't be 0)
            for(int i = 1; i < n; i++){
                largeNum[i] = (int)(Math.random()*9);                           //fills the array with random ints from 0 to 9 inclusive
            }
        }
    }
    
    public HugeInteger add(HugeInteger h){
        String sum = "";                                                        //create string sum to hold the value of our integer
        StringBuilder sum1;                                                     //sum1 is stringbuilder so that it can be reversed later
        HugeInteger answer;                                                     //the final return object
        int carry = 0;
        int temp;
        if ((this.sign == false && h.sign == false) || (this.sign == true && h.sign == true)){ //addition of 2 positive or 2 negative numbers
            if(this.size == h.size){                                            //if the HugeIntegers are of the same size
                int loop1 = this.size - 1;                                      
                for (int i = loop1; i >= 0; i--){
                    temp = carry + this.largeNum[i] + h.largeNum[i];
                    if (carry > 0){
                    carry -= 1;                                                 
                    }
                    if (temp > 9){                                              
                        sum += Integer.toString(temp%10);                       
                        carry += 1;                                             
                    }
                    else{
                        sum += Integer.toString(temp);                          
                    }
                }
                if (carry > 0){
                    sum += Integer.toString(carry);
                }
                if ((this.sign == true && h.sign == true)){
                    sum += "-";                                                 
                }
            }
            else if (this.size > h.size){                                       //if the 1st integer is of a bigger size
                int diff = this.size - h.size;
                int loop1 = h.size - 1;                                         
                for (int i = loop1; i>=0; i--){
                    temp = carry + this.largeNum[diff + i] + h.largeNum[i];     
                    if (carry > 0){
                        carry -= 1;                                                 
                    }
                    if (temp > 9){                                              
                        sum += Integer.toString(temp%10);                       
                        carry += 1;                                             
                    }
                    else{
                        sum += Integer.toString(temp);                          
                    }
                }
                int index = diff - 1;
                for (int i = index; i>=0; i--){
                    temp = carry + this.largeNum[i];     
                    if (carry > 0){
                        carry -= 1;                                                 
                    }
                    if (temp > 9){                                              
                        sum += Integer.toString(temp%10);                       
                        carry += 1;                                             
                    }
                    else{
                        sum += Integer.toString(temp);                          
                    }
                }
                sum += carry;
                if ((this.sign == true && h.sign == true)){
                    sum += "-";                                                 
                }
            }
            else{                                                               //if the second integer is of a bigger size                                                 
                return h.add(this);
                }                                                
            }
        else {                                                                  //addition of 1 positive and 1 negative number (i.e subtract)
            if ((this.sign == false && h.sign == true)){
                if (this.size == h.size){
                    if(this.isAbsoluteGreater(h) == 0){
                        sum = "0";
                    }
                    else if (this.isAbsoluteGreater(h) == 1){
                        int loop2 = this.size - 1;
                        for (int i = loop2; i >= 0; i--){
                            temp = this.largeNum[i] - h.largeNum[i] - carry;
                            if (carry > 0){
                                carry -= 1;
                            }
                            if (temp < 0){
                                sum += temp + 10;
                                carry += 1;
                            }
                            else{
                                 sum += temp;   
                            }
                        }
                    }
                    else{
                        int loop2 = h.size - 1;
                        for (int i = loop2; i >= 0; i--){
                            temp = h.largeNum[i] - this.largeNum[i] - carry;
                            if (carry > 0){
                                carry -= 1;
                            }
                            if (temp < 0){
                                sum += temp + 10;
                                carry += 1;
                            }
                            else{
                                 sum += temp;   
                            }
                        }
                        sum += '-';
                    }
                }
                else if(this.size > h.size){
                    int diff = this.size - h.size;
                    int loop2 = h.size - 1;
                    for(int i = loop2; i >= 0; i--){
                        temp = this.largeNum[diff + i] - h.largeNum[i] - carry;
                        if (carry > 0){
                            carry -= 1;
                        }
                        if (temp < 0){
                            sum += temp + 10;
                            carry += 1;
                        }
                        else{
                            sum += temp;
                        }
                    }
                    int index = diff - 1;
                    for(int i = index; i >= 0; i--){
                        temp = this.largeNum[i] - carry;
                        if (carry > 0){
                            carry -= 1;
                        }
                        if (temp < 0){
                            sum += temp + 10;
                            carry += 1;
                        }
                        else{
                            sum += temp;
                        }
                    }
                }
                else {
                    int diff = h.size - this.size;
                    int loop2 = this.size - 1;
                    for(int i = loop2; i >= 0; i--){
                        temp = h.largeNum[diff + i] - this.largeNum[i] - carry;
                        if (carry > 0){
                            carry -= 1;
                        }
                        if (temp < 0){
                            sum += temp + 10;
                            carry += 1;
                        }
                        else{
                            sum += temp;
                        }
                    }
                    int index = diff - 1;
                    for(int i = index; i >= 0; i--){
                        temp = h.largeNum[i] - carry;
                        if (carry > 0){
                            carry -= 1;
                        }
                        if (temp < 0){
                            sum += temp + 10;
                            carry += 1;
                        }
                        else{
                            sum += temp;
                        }
                    }
                    sum += "-";
                }
            }
            else{
                return h.add(this);
            }

        }  
        sum1 = new StringBuilder(sum);                                          //turns the final string into StringBuilder so that it can be reversed
        answer = new HugeInteger(sum1.reverse().toString());                    //creates a new HugeInteger and returns it
        return answer;
    }
    
    public HugeInteger subtract(HugeInteger h){
        HugeInteger ans;
        String stringy;
        if (h.sign == false){
            stringy = "-";
            stringy += h.toString();
        }
        else{
            stringy = "";
            for (int i = 0; i < h.largeNum.length; i++){
                stringy += Integer.toString(h.largeNum[i]);
            }
        }
        ans = new HugeInteger(stringy);
        return this.add(ans);
    }
    
    public String toString(){
        String s = "";
        if (sign == true){
            s += "-";
        }
        for (int i = 0; i < size; i++){
            s += largeNum[i];
        }
        return s;
    }
    
    public int compareTo(HugeInteger h){
        if (this.sign == false && h.sign == false){                             //comparing 2 positive numbers
            if (this.size > h.size){
                return 1;
            }
            else if (h.size > this.size){
                return -1;
            }
            else{
                for(int i = 0; i < this.size; i++){
                    if (this.largeNum[i] > h.largeNum[i]){
                        return 1;
                    }
                    if (this.largeNum[i] < h.largeNum[i]){
                        return -1;
                    }
                }
                return 0;
            }
        }
        else if (this.sign == true && h.sign == true){                          //comparing 2 negative numbers
            if (this.size > h.size){
                return -1;
            }
            else if (h.size > this.size){
                return 1;
            }
            else{
                for(int i = 0; i < this.size; i++){
                    if (this.largeNum[i] > h.largeNum[i]){
                        return -1;
                    }
                    if (this.largeNum[i] < h.largeNum[i]){
                        return 1;
                    }
                }
                return 0;
            }
        }
        else if (this.sign == true && h.sign == false){                         //first neg, second pos
            return -1;
        }
        else{                                                                   //first pos, second neg
            return 1;
        }
    }
    
    public int isAbsoluteGreater(HugeInteger h){
        if (this.size > h.size){
            return 1;
        }
        else if (h.size < this.size){
            return -1;
        }
        else{
            for(int i = 0; i < this.size; i++){
                if (this.largeNum[i] > h.largeNum[i]){
                    return 1;
                }
                if (this.largeNum[i] < h.largeNum[i]){
                    return -1;
                }
            }
            return 0;
        }
    }
    
    public int returnSize(){
        return size;
    }
    public boolean returnSign(){
        return sign;
    }
    public int[] returnNum(){
        return largeNum;
    }
}
